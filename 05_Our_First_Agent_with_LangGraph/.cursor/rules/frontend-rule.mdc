---
description: Chess-themed ChatGPT-like frontend using Next.js with best practices
globs:
  - frontend/**
  - vercel.json
alwaysApply: false
---

rules:
  - all frontend code must be inside frontend/
  - frontend must use Next.js and be fully compatible with Vercel deployment
  - reuse same vercel.json from backend project placed in root
  - UI must be fully responsive across mobile, tablet and desktop
  - each major feature must have its own React component to improve maintainability
  - design and theming must reflect the chess atmosphere clearly and creatively
  - use Tailwind CSS or similar utility-first CSS framework for clean styling
  - use React Markdown to render LLM responses with common plugins preconfigured (e.g., math, tables, syntax highlighting)
  - support streaming chat responses with smooth auto-scroll as messages arrive
  - chat layout must include avatars, user/AI distinction, and visual clarity
  - components must follow atomic design structure: atoms, molecules, organisms
  - shared utilities must be stored in a separate utils/ folder inside frontend/
  - support theme toggling (light/dark) for accessibility and UX
  - use environment variables via process.env.NEXT_PUBLIC_*
  - do not hardcode API keys or secrets; never expose them in frontend code
  - validate all user input on client side where possible
  - create a loading indicator or animation for LLM responses
  - implement basic analytics hook (e.g., page view logging or error boundaries)
  - integrate SEO basics: title tags, meta description, Open Graph tags
  - must include 404 and error pages with chess-themed visuals
  - include a /health route in Next.js for basic ping monitoring if used independently
  - use ESLint and Prettier for consistent code quality
  - avoid inline styles; use consistent classNames
  - follow a clear folder structure: pages/, components/, styles/, utils/
  - ensure Lighthouse accessibility score remains above 90
  - include basic keyboard navigation and ARIA roles for accessibility
  - add loading skeletons for better UX on slow networks
  - use SWR or React Query for any client-side data fetching outside chat
  - prefer functional components and React hooks over class components
  - enable TypeScript strict mode for better type safety
  - test components using Jest and React Testing Library when needed
  - document custom hooks or logic with brief comments for maintainability
  - optimize image and static asset loading using Next.js features
  - prioritize performance with code-splitting and lazy loading of heavy components
  - apply CORS and CSP headers via Next.js middleware if public API is exposed