"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./utils/api.ts":
/*!**********************!*\
  !*** ./utils/api.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzePGN: function() { return /* binding */ analyzePGN; },\n/* harmony export */   analyzePlayer: function() { return /* binding */ analyzePlayer; },\n/* harmony export */   analyzeRecentGames: function() { return /* binding */ analyzeRecentGames; },\n/* harmony export */   apiUrl: function() { return /* binding */ apiUrl; },\n/* harmony export */   checkHealth: function() { return /* binding */ checkHealth; },\n/* harmony export */   readStream: function() { return /* binding */ readStream; },\n/* harmony export */   uploadPNG: function() { return /* binding */ uploadPNG; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\nconst apiUrl = process.env.NEXT_PUBLIC_API_URL || \"http://127.0.0.1:8000\";\n// Generic fetch wrapper with error handling\nconst fetchWithErrorHandling = async (url, options)=>{\n    try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new Error(errorData.error || errorData.detail || \"HTTP \".concat(response.status, \": \").concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        if (error instanceof Error) {\n            throw error;\n        }\n        throw new Error(\"An unknown error occurred\");\n    }\n};\n// Health check endpoint\nconst checkHealth = async ()=>{\n    return fetchWithErrorHandling(\"\".concat(apiUrl, \"/health\"), {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n};\n// Player analysis endpoint\nconst analyzePlayer = async (request)=>{\n    const response = await fetch(\"\".concat(apiUrl, \"/analyze/player\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(request)\n    });\n    if (!response.ok) {\n        const errorData = await response.json().catch(()=>({}));\n        throw new Error(errorData.error || errorData.detail || \"HTTP \".concat(response.status, \": \").concat(response.statusText));\n    }\n    return response.body || \"\";\n};\n// PGN analysis endpoint\nconst analyzePGN = async (request)=>{\n    const response = await fetch(\"\".concat(apiUrl, \"/analyze/pgn\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(request)\n    });\n    if (!response.ok) {\n        const errorData = await response.json().catch(()=>({}));\n        throw new Error(errorData.error || errorData.detail || \"HTTP \".concat(response.status, \": \").concat(response.statusText));\n    }\n    return response.body || \"\";\n};\n// Recent games analysis endpoint\nconst analyzeRecentGames = async (request)=>{\n    const response = await fetch(\"\".concat(apiUrl, \"/analyze/recent-games\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(request)\n    });\n    if (!response.ok) {\n        const errorData = await response.json().catch(()=>({}));\n        throw new Error(errorData.error || errorData.detail || \"HTTP \".concat(response.status, \": \").concat(response.statusText));\n    }\n    return response.body || \"\";\n};\n// Upload PNG file endpoint\nconst uploadPNG = async (file, apiKeys)=>{\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    // Add API keys to form data\n    if (apiKeys.openai_key) {\n        formData.append(\"openai_key\", apiKeys.openai_key);\n    }\n    if (apiKeys.langsmith_key) {\n        formData.append(\"langsmith_key\", apiKeys.langsmith_key);\n    }\n    if (apiKeys.tavily_key) {\n        formData.append(\"tavily_key\", apiKeys.tavily_key);\n    }\n    if (apiKeys.qdrant_api_key) {\n        formData.append(\"qdrant_api_key\", apiKeys.qdrant_api_key);\n    }\n    if (apiKeys.qdrant_url) {\n        formData.append(\"qdrant_url\", apiKeys.qdrant_url);\n    }\n    const response = await fetch(\"\".concat(apiUrl, \"/upload/png\"), {\n        method: \"POST\",\n        body: formData\n    });\n    if (!response.ok) {\n        const errorData = await response.json().catch(()=>({}));\n        throw new Error(errorData.error || errorData.detail || \"HTTP \".concat(response.status, \": \").concat(response.statusText));\n    }\n    const result = await response.json();\n    return result.analysis || \"Analysis completed successfully\";\n};\n// Stream reader utility for handling streaming responses\nconst readStream = async (stream, onChunk, onError, onComplete)=>{\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    try {\n        while(true){\n            const { done, value } = await reader.read();\n            if (done) break;\n            const chunk = decoder.decode(value, {\n                stream: true\n            });\n            onChunk(chunk);\n        }\n        onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n    } catch (error) {\n        onError === null || onError === void 0 ? void 0 : onError(error instanceof Error ? error : new Error(\"Stream error\"));\n    } finally{\n        reader.releaseLock();\n    }\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFDbEMsT0FBTzRCLE9BQU9DLFFBQVEsSUFBSTtBQUM1QixFQUFFO0FBRUYseURBQXlEO0FBQ2xELE1BQU1DLGFBQWEsT0FDeEJDLFFBQ0FDLFNBQ0FDLFNBQ0FDO0lBRUEsTUFBTUMsU0FBU0osT0FBT0ssU0FBUztJQUMvQixNQUFNQyxVQUFVLElBQUlDO0lBRXBCLElBQUk7UUFDRixNQUFPLEtBQU07WUFDWCxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTUwsT0FBT00sSUFBSTtZQUN6QyxJQUFJRixNQUFNO1lBRVYsTUFBTUcsUUFBUUwsUUFBUU0sTUFBTSxDQUFDSCxPQUFPO2dCQUFFVCxRQUFRO1lBQUs7WUFDbkRDLFFBQVFVO1FBQ1Y7UUFDQVIsdUJBQUFBLGlDQUFBQTtJQUNGLEVBQUUsT0FBTy9CLE9BQU87UUFDZDhCLG9CQUFBQSw4QkFBQUEsUUFBVTlCLGlCQUFpQkQsUUFBUUMsUUFBUSxJQUFJRCxNQUFNO0lBQ3ZELFNBQVU7UUFDUmlDLE9BQU9TLFdBQVc7SUFDcEI7QUFDRixFQUFFO0FBRWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3V0aWxzL2FwaS50cz82ZWQwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFwaVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly8xMjcuMC4wLjE6ODAwMCc7XG5cbi8vIFR5cGVzIGZvciBBUEkgcmVxdWVzdHMgYW5kIHJlc3BvbnNlc1xuZXhwb3J0IGludGVyZmFjZSBDaGF0TWVzc2FnZSB7XG4gIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIHRpbWVzdGFtcD86IG51bWJlcjtcbn1cblxuLy8gVXBkYXRlZCBpbnRlcmZhY2VzIHRvIG1hdGNoIGJhY2tlbmQgUHlkYW50aWMgbW9kZWxzIGV4YWN0bHlcbmV4cG9ydCBpbnRlcmZhY2UgUGxheWVyQW5hbHlzaXNSZXF1ZXN0IHtcbiAgdXNlcm5hbWU/OiBzdHJpbmc7IC8vIE9wdGlvbmFsIC0gd2lsbCBiZSByZXF1ZXN0ZWQgaWYgbWlzc2luZ1xuICBvcGVuYWlfa2V5OiBzdHJpbmc7XG4gIGxhbmdzbWl0aF9rZXk6IHN0cmluZztcbiAgdGF2aWx5X2tleTogc3RyaW5nO1xuICBxZHJhbnRfYXBpX2tleT86IHN0cmluZztcbiAgcWRyYW50X3VybD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQR05BbmFseXNpc1JlcXVlc3Qge1xuICBwZ246IHN0cmluZztcbiAgb3BlbmFpX2tleTogc3RyaW5nO1xuICBsYW5nc21pdGhfa2V5OiBzdHJpbmc7XG4gIHRhdmlseV9rZXk6IHN0cmluZztcbiAgcWRyYW50X2FwaV9rZXk/OiBzdHJpbmc7XG4gIHFkcmFudF91cmw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjZW50R2FtZXNSZXF1ZXN0IHtcbiAgdXNlcm5hbWU/OiBzdHJpbmc7IC8vIE9wdGlvbmFsIC0gd2lsbCBiZSByZXF1ZXN0ZWQgaWYgbWlzc2luZ1xuICBudW1fZ2FtZXM6IG51bWJlcjtcbiAgb3BlbmFpX2tleTogc3RyaW5nO1xuICBsYW5nc21pdGhfa2V5OiBzdHJpbmc7XG4gIHRhdmlseV9rZXk6IHN0cmluZztcbiAgcWRyYW50X2FwaV9rZXk/OiBzdHJpbmc7XG4gIHFkcmFudF91cmw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoUmVzcG9uc2Uge1xuICBzdGF0dXM6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcGlFcnJvciB7XG4gIGVycm9yOiBzdHJpbmc7XG4gIGRldGFpbHM/OiBzdHJpbmc7XG4gIHN0YXR1c19jb2RlPzogbnVtYmVyO1xufVxuXG4vLyBHZW5lcmljIGZldGNoIHdyYXBwZXIgd2l0aCBlcnJvciBoYW5kbGluZ1xuY29uc3QgZmV0Y2hXaXRoRXJyb3JIYW5kbGluZyA9IGFzeW5jIDxUPihcbiAgdXJsOiBzdHJpbmcsXG4gIG9wdGlvbnM6IFJlcXVlc3RJbml0XG4pOiBQcm9taXNlPFQ+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucyk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpLmNhdGNoKCgpID0+ICh7fSkpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBlcnJvckRhdGEuZXJyb3IgfHwgXG4gICAgICAgIGVycm9yRGF0YS5kZXRhaWwgfHwgXG4gICAgICAgIGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQnKTtcbiAgfVxufTtcblxuLy8gSGVhbHRoIGNoZWNrIGVuZHBvaW50XG5leHBvcnQgY29uc3QgY2hlY2tIZWFsdGggPSBhc3luYyAoKTogUHJvbWlzZTxIZWFsdGhSZXNwb25zZT4gPT4ge1xuICByZXR1cm4gZmV0Y2hXaXRoRXJyb3JIYW5kbGluZzxIZWFsdGhSZXNwb25zZT4oYCR7YXBpVXJsfS9oZWFsdGhgLCB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIH0sXG4gIH0pO1xufTtcblxuLy8gUGxheWVyIGFuYWx5c2lzIGVuZHBvaW50XG5leHBvcnQgY29uc3QgYW5hbHl6ZVBsYXllciA9IGFzeW5jIChcbiAgcmVxdWVzdDogUGxheWVyQW5hbHlzaXNSZXF1ZXN0XG4pOiBQcm9taXNlPFJlYWRhYmxlU3RyZWFtPFVpbnQ4QXJyYXk+IHwgc3RyaW5nPiA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7YXBpVXJsfS9hbmFseXplL3BsYXllcmAsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSxcbiAgfSk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkuY2F0Y2goKCkgPT4gKHt9KSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgZXJyb3JEYXRhLmVycm9yIHx8IFxuICAgICAgZXJyb3JEYXRhLmRldGFpbCB8fCBcbiAgICAgIGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWBcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNwb25zZS5ib2R5IHx8ICcnO1xufTtcblxuLy8gUEdOIGFuYWx5c2lzIGVuZHBvaW50XG5leHBvcnQgY29uc3QgYW5hbHl6ZVBHTiA9IGFzeW5jIChcbiAgcmVxdWVzdDogUEdOQW5hbHlzaXNSZXF1ZXN0XG4pOiBQcm9taXNlPFJlYWRhYmxlU3RyZWFtPFVpbnQ4QXJyYXk+IHwgc3RyaW5nPiA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7YXBpVXJsfS9hbmFseXplL3BnbmAsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSxcbiAgfSk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkuY2F0Y2goKCkgPT4gKHt9KSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgZXJyb3JEYXRhLmVycm9yIHx8IFxuICAgICAgZXJyb3JEYXRhLmRldGFpbCB8fCBcbiAgICAgIGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWBcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNwb25zZS5ib2R5IHx8ICcnO1xufTtcblxuLy8gUmVjZW50IGdhbWVzIGFuYWx5c2lzIGVuZHBvaW50XG5leHBvcnQgY29uc3QgYW5hbHl6ZVJlY2VudEdhbWVzID0gYXN5bmMgKFxuICByZXF1ZXN0OiBSZWNlbnRHYW1lc1JlcXVlc3Rcbik6IFByb21pc2U8UmVhZGFibGVTdHJlYW08VWludDhBcnJheT4gfCBzdHJpbmc+ID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHthcGlVcmx9L2FuYWx5emUvcmVjZW50LWdhbWVzYCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLFxuICB9KTtcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKS5jYXRjaCgoKSA9PiAoe30pKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBlcnJvckRhdGEuZXJyb3IgfHwgXG4gICAgICBlcnJvckRhdGEuZGV0YWlsIHx8IFxuICAgICAgYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc3BvbnNlLmJvZHkgfHwgJyc7XG59O1xuXG4vLyBVcGxvYWQgUE5HIGZpbGUgZW5kcG9pbnRcbmV4cG9ydCBjb25zdCB1cGxvYWRQTkcgPSBhc3luYyAoXG4gIGZpbGU6IEZpbGUsXG4gIGFwaUtleXM6IHtcbiAgICBvcGVuYWlfa2V5Pzogc3RyaW5nO1xuICAgIGxhbmdzbWl0aF9rZXk/OiBzdHJpbmc7XG4gICAgdGF2aWx5X2tleT86IHN0cmluZztcbiAgICBxZHJhbnRfYXBpX2tleT86IHN0cmluZztcbiAgICBxZHJhbnRfdXJsPzogc3RyaW5nO1xuICB9XG4pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcblxuICAvLyBBZGQgQVBJIGtleXMgdG8gZm9ybSBkYXRhXG4gIGlmIChhcGlLZXlzLm9wZW5haV9rZXkpIHtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ29wZW5haV9rZXknLCBhcGlLZXlzLm9wZW5haV9rZXkpO1xuICB9XG4gIGlmIChhcGlLZXlzLmxhbmdzbWl0aF9rZXkpIHtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2xhbmdzbWl0aF9rZXknLCBhcGlLZXlzLmxhbmdzbWl0aF9rZXkpO1xuICB9XG4gIGlmIChhcGlLZXlzLnRhdmlseV9rZXkpIHtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ3RhdmlseV9rZXknLCBhcGlLZXlzLnRhdmlseV9rZXkpO1xuICB9XG4gIGlmIChhcGlLZXlzLnFkcmFudF9hcGlfa2V5KSB7XG4gICAgZm9ybURhdGEuYXBwZW5kKCdxZHJhbnRfYXBpX2tleScsIGFwaUtleXMucWRyYW50X2FwaV9rZXkpO1xuICB9XG4gIGlmIChhcGlLZXlzLnFkcmFudF91cmwpIHtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ3FkcmFudF91cmwnLCBhcGlLZXlzLnFkcmFudF91cmwpO1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHthcGlVcmx9L3VwbG9hZC9wbmdgLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYm9keTogZm9ybURhdGEsXG4gIH0pO1xuXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkuY2F0Y2goKCkgPT4gKHt9KSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgZXJyb3JEYXRhLmVycm9yIHx8IFxuICAgICAgZXJyb3JEYXRhLmRldGFpbCB8fCBcbiAgICAgIGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWBcbiAgICApO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICByZXR1cm4gcmVzdWx0LmFuYWx5c2lzIHx8ICdBbmFseXNpcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5Jztcbn07XG5cbi8vIFN0cmVhbSByZWFkZXIgdXRpbGl0eSBmb3IgaGFuZGxpbmcgc3RyZWFtaW5nIHJlc3BvbnNlc1xuZXhwb3J0IGNvbnN0IHJlYWRTdHJlYW0gPSBhc3luYyAoXG4gIHN0cmVhbTogUmVhZGFibGVTdHJlYW08VWludDhBcnJheT4sXG4gIG9uQ2h1bms6IChjaHVuazogc3RyaW5nKSA9PiB2b2lkLFxuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZCxcbiAgb25Db21wbGV0ZT86ICgpID0+IHZvaWRcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcblxuICB0cnkge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgaWYgKGRvbmUpIGJyZWFrO1xuICAgICAgXG4gICAgICBjb25zdCBjaHVuayA9IGRlY29kZXIuZGVjb2RlKHZhbHVlLCB7IHN0cmVhbTogdHJ1ZSB9KTtcbiAgICAgIG9uQ2h1bmsoY2h1bmspO1xuICAgIH1cbiAgICBvbkNvbXBsZXRlPy4oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBvbkVycm9yPy4oZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKCdTdHJlYW0gZXJyb3InKSk7XG4gIH0gZmluYWxseSB7XG4gICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGFwaVVybCB9OyAiXSwibmFtZXMiOlsiYXBpVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJmZXRjaFdpdGhFcnJvckhhbmRsaW5nIiwidXJsIiwib3B0aW9ucyIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsImVycm9yRGF0YSIsImpzb24iLCJjYXRjaCIsIkVycm9yIiwiZXJyb3IiLCJkZXRhaWwiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiY2hlY2tIZWFsdGgiLCJtZXRob2QiLCJoZWFkZXJzIiwiYW5hbHl6ZVBsYXllciIsInJlcXVlc3QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImFuYWx5emVQR04iLCJhbmFseXplUmVjZW50R2FtZXMiLCJ1cGxvYWRQTkciLCJmaWxlIiwiYXBpS2V5cyIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJvcGVuYWlfa2V5IiwibGFuZ3NtaXRoX2tleSIsInRhdmlseV9rZXkiLCJxZHJhbnRfYXBpX2tleSIsInFkcmFudF91cmwiLCJyZXN1bHQiLCJhbmFseXNpcyIsInJlYWRTdHJlYW0iLCJzdHJlYW0iLCJvbkNodW5rIiwib25FcnJvciIsIm9uQ29tcGxldGUiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJkb25lIiwidmFsdWUiLCJyZWFkIiwiY2h1bmsiLCJkZWNvZGUiLCJyZWxlYXNlTG9jayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./utils/api.ts\n"));

/***/ })

});